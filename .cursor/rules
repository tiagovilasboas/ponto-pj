# üöÄ Ponto PJ - Cursor Rules & Best Practices

Este arquivo cont√©m todas as boas pr√°ticas e padr√µes arquiteturais implementados neste projeto. Use estas regras como guia para manter a qualidade e consist√™ncia do c√≥digo.

## üèóÔ∏è Arquitetura & Padr√µes

### Clean Architecture
- **Separa√ß√£o de responsabilidades**: Cada camada tem uma fun√ß√£o espec√≠fica
- **Presentation Layer**: React components, hooks, stores
- **Business Logic Layer**: Services, validation, error handling
- **Data Access Layer**: Repositories, cache, external APIs

### Repository Pattern
- **BaseRepository**: Classe abstrata com funcionalidades comuns
- **CachedRepository**: Extens√£o com sistema de cache inteligente
- **Especializa√ß√£o**: Cada entidade tem seu pr√≥prio repository
- **Valida√ß√£o**: Integrada nos m√©todos create, update, upsert

### SOLID Principles
- **S** - Single Responsibility: Cada classe tem uma √∫nica responsabilidade
- **O** - Open/Closed: Extens√≠vel sem modifica√ß√£o
- **L** - Liskov Substitution: Repositories intercambi√°veis
- **I** - Interface Segregation: Interfaces espec√≠ficas
- **D** - Dependency Inversion: Depend√™ncias injetadas

## üìÅ Estrutura de Arquivos

### Organiza√ß√£o por Responsabilidade
```
src/
‚îú‚îÄ‚îÄ components/     # UI Components (apenas apresenta√ß√£o)
‚îú‚îÄ‚îÄ hooks/         # Custom hooks (l√≥gica de UI)
‚îú‚îÄ‚îÄ services/      # Business logic (orquestra√ß√£o)
‚îú‚îÄ‚îÄ repositories/  # Data access (comunica√ß√£o com APIs)
‚îú‚îÄ‚îÄ stores/        # State management (apenas estado)
‚îú‚îÄ‚îÄ lib/           # Utilities (fun√ß√µes puras)
‚îú‚îÄ‚îÄ types/         # TypeScript definitions
‚îî‚îÄ‚îÄ test/          # Testes organizados por tipo
```

### Conven√ß√µes de Nomenclatura
- **Components**: PascalCase (ex: `WorkSessionCard.tsx`)
- **Hooks**: camelCase com prefixo `use` (ex: `useWorkSession.ts`)
- **Services**: camelCase com sufixo `Service` (ex: `workSessionService.ts`)
- **Repositories**: camelCase com sufixo `Repository` (ex: `workSessionRepository.ts`)
- **Stores**: camelCase com sufixo `Store` (ex: `workSessionStore.ts`)
- **Types**: PascalCase (ex: `WorkSession.ts`)
- **Constants**: UPPER_SNAKE_CASE (ex: `API_ENDPOINTS.ts`)

## üéØ Padr√µes de C√≥digo

### TypeScript
- **Tipagem forte**: Sempre use tipos expl√≠citos
- **Interfaces**: Para estruturas de dados
- **Types**: Para unions, intersections, mapped types
- **Generics**: Para componentes e fun√ß√µes reutiliz√°veis
- **Strict mode**: Sempre habilitado

### React Components
```typescript
// ‚úÖ Padr√£o correto
interface ComponentProps {
  data: WorkSession
  onAction: (id: string) => void
  loading?: boolean
}

export function Component({ data, onAction, loading = false }: ComponentProps) {
  // L√≥gica do componente
  return <div>...</div>
}

// ‚ùå Evitar
export function Component(props: any) {
  // Sem tipagem
}
```

### Custom Hooks
```typescript
// ‚úÖ Padr√£o correto
export function useWorkSession(userId: string) {
  const [data, setData] = useState<WorkSession | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // L√≥gica do hook
  return { data, loading, error, refetch }
}

// ‚ùå Evitar
export function useWorkSession() {
  // Sem par√¢metros tipados
  // Sem retorno tipado
}
```

### Services
```typescript
// ‚úÖ Padr√£o correto
export class WorkSessionService {
  async getSessionByDate(date: string): Promise<WorkSession | null> {
    try {
      const userId = await workSessionRepository.getCurrentUserId()
      return await workSessionRepository.findByUserAndDate(userId, date)
    } catch (error) {
      console.error('Erro ao buscar sess√£o por data:', error)
      throw error
    }
  }
}

// ‚ùå Evitar
export class WorkSessionService {
  async getSessionByDate(date: any) {
    // Sem tipagem
    // Sem tratamento de erro
    return await supabase.from('work_sessions').select('*')
  }
}
```

### Repositories
```typescript
// ‚úÖ Padr√£o correto
export class WorkSessionRepository extends CachedRepository {
  protected tableName = 'work_sessions'

  async findByUserAndDate(userId: string, date: string): Promise<WorkSession | null> {
    const cacheKey = this.generateCacheKey('session', userId, date)
    
    return this.getCached(cacheKey, async () => {
      const { data, error } = await this.getSupabase()
        .from(this.tableName)
        .select('*')
        .eq('user_id', userId)
        .eq('date', date)
        .single()

      if (error && error.code !== 'PGRST116') {
        this.handleError(error, 'findByUserAndDate')
      }

      return data
    }, { ttl: 2 * 60 * 1000 })
  }
}

// ‚ùå Evitar
export class WorkSessionRepository {
  async findByUserAndDate(userId: any, date: any) {
    // Sem cache
    // Sem tratamento de erro padronizado
    // Sem tipagem
  }
}
```

## üîí Valida√ß√£o & Tratamento de Erros

### Sistema de Valida√ß√£o
```typescript
// ‚úÖ Usar validadores espec√≠ficos
const validation = WorkSessionValidator.validateCreateData(data)
if (!validation.isValid) {
  throw new Error(`validation.error: ${validation.errors.join(', ')}`)
}

// ‚ùå Evitar valida√ß√£o manual
if (!data.user_id) {
  throw new Error('User ID is required')
}
```

### Tratamento de Erros
```typescript
// ‚úÖ Usar ErrorHandler centralizado
import { ErrorHandler } from '@/lib/errorHandler'

try {
  // Opera√ß√£o
} catch (error) {
  const userMessage = ErrorHandler.mapError(error)
  // Mostrar mensagem amig√°vel
}

// ‚ùå Evitar tratamento gen√©rico
try {
  // Opera√ß√£o
} catch (error) {
  console.error(error)
  // Sem mapeamento de erro
}
```

## ‚ö° Performance & Cache

### Cache Inteligente
```typescript
// ‚úÖ Usar cache com TTL apropriado
return this.getCached(cacheKey, async () => {
  // Opera√ß√£o custosa
}, { ttl: 2 * 60 * 1000 }) // 2 minutos para dados din√¢micos

// ‚ùå Evitar cache sem TTL
return this.getCached(cacheKey, async () => {
  // Opera√ß√£o
}) // Sem TTL definido
```

### Invalida√ß√£o de Cache
```typescript
// ‚úÖ Invalidar cache relacionado
this.invalidateCacheByPattern(`session:${userId}`)
this.invalidateCacheByPattern(`sessions:${userId}`)

// ‚ùå Evitar invalida√ß√£o desnecess√°ria
this.clearCache() // Limpa todo o cache
```

## üß™ Testes

### Estrat√©gia de Testes
- **Unit Tests**: Business logic isolada
- **Integration Tests**: Fluxos principais
- **Component Tests**: Comportamento de UI
- **Repository Tests**: Mock de depend√™ncias

### Padr√£o de Testes
```typescript
// ‚úÖ Teste de business logic
describe('WorkSessionBusinessService', () => {
  it('should calculate statistics correctly', () => {
    const sessions = [/* mock data */]
    const stats = WorkSessionBusinessService.calculateStatistics(sessions)
    expect(stats.totalHours).toBe(40)
  })
})

// ‚úÖ Teste de repository
describe('WorkSessionRepository', () => {
  it('should cache results', async () => {
    const result1 = await repository.findByUserAndDate(userId, date)
    const result2 = await repository.findByUserAndDate(userId, date)
    expect(result1).toBe(result2) // Cache hit
  })
})
```

## üåê Internacionaliza√ß√£o

### Uso de Tradu√ß√µes
```typescript
// ‚úÖ Usar hook de tradu√ß√£o
import { useTranslation } from '@/i18n/useTranslation'

export function Component() {
  const { t } = useTranslation()
  return <div>{t('app.title')}</div>
}

// ‚ùå Evitar strings hardcoded
export function Component() {
  return <div>Ponto PJ</div> // Sem tradu√ß√£o
}
```

### Estrutura de Tradu√ß√µes
```json
{
  "app": {
    "title": "Ponto PJ",
    "subtitle": "Sistema de Ponto Eletr√¥nico"
  },
  "errors": {
    "validation": {
      "required": "Campo obrigat√≥rio"
    }
  }
}
```

## üì± PWA & Mobile-First

### Componentes Mobile-Friendly
```typescript
// ‚úÖ Componentes touch-friendly
<button className="min-h-[44px] min-w-[44px]">
  {/* Conte√∫do */}
</button>

// ‚ùå Evitar elementos muito pequenos
<button className="h-6 w-6">
  {/* Dif√≠cil de tocar */}
</button>
```

### Responsividade
```css
/* ‚úÖ Mobile-first approach */
.container {
  padding: 1rem;
}

@media (min-width: 768px) {
  .container {
    padding: 2rem;
  }
}

/* ‚ùå Desktop-first */
.container {
  padding: 2rem;
}

@media (max-width: 767px) {
  .container {
    padding: 1rem;
  }
}
```

## üîê Seguran√ßa

### Valida√ß√£o de Entrada
```typescript
// ‚úÖ Validar sempre dados de entrada
const validation = UserValidator.validateCreateData(data)
if (!validation.isValid) {
  throw new Error(`validation.error: ${validation.errors.join(', ')}`)
}

// ‚ùå Confiar apenas em valida√ß√£o client-side
// Sem valida√ß√£o server-side
```

### Autentica√ß√£o
```typescript
// ‚úÖ Usar repository para autentica√ß√£o
const userId = await workSessionRepository.getCurrentUserId()

// ‚ùå Acessar Supabase diretamente
const { data: { user } } = await supabase.auth.getUser()
```

## üìä Estado & Gerenciamento

### Stores (Zustand)
```typescript
// ‚úÖ Store focado apenas em estado
export const useSessionStore = create<SessionState>((set) => ({
  session: null,
  loading: false,
  
  setSession: (session) => set({ session }),
  setLoading: (loading) => set({ loading }),
  
  // Apenas orquestra√ß√£o, sem l√≥gica de neg√≥cio
  loadSession: async () => {
    set({ loading: true })
    try {
      const session = await workSessionService.getSessionByDate(today)
      set({ session })
    } finally {
      set({ loading: false })
    }
  }
}))

// ‚ùå Store com l√≥gica de neg√≥cio
export const useSessionStore = create<SessionState>((set) => ({
  // L√≥gica de c√°lculo de tempo trabalhado
  // Comunica√ß√£o direta com Supabase
  // Valida√ß√£o de dados
}))
```

## üé® Design System

### Componentes Reutiliz√°veis
```typescript
// ‚úÖ Componente com props bem definidas
interface SquareCTAProps {
  title: string
  subtitle?: string
  icon: React.ReactNode
  onClick: () => void
  variant?: 'primary' | 'secondary' | 'danger'
  disabled?: boolean
}

export function SquareCTA({ 
  title, 
  subtitle, 
  icon, 
  onClick, 
  variant = 'primary',
  disabled = false 
}: SquareCTAProps) {
  // Implementa√ß√£o
}

// ‚ùå Componente com props gen√©ricas
export function SquareCTA(props: any) {
  // Sem tipagem
}
```

### Cores e Gradientes
```css
/* ‚úÖ Usar vari√°veis CSS */
:root {
  --primary-gradient: linear-gradient(135deg, #3b82f6, #1d4ed8);
  --success-gradient: linear-gradient(135deg, #10b981, #059669);
  --danger-gradient: linear-gradient(135deg, #ef4444, #dc2626);
}

/* ‚ùå Cores hardcoded */
.button {
  background: linear-gradient(135deg, #3b82f6, #1d4ed8);
}
```

## üöÄ Performance

### Code Splitting
```typescript
// ‚úÖ Lazy loading de componentes
const HistoryPage = lazy(() => import('@/pages/History'))

// ‚úÖ Lazy loading de rotas
const routes = [
  {
    path: '/history',
    element: <Suspense fallback={<Loading />}><HistoryPage /></Suspense>
  }
]
```

### Bundle Optimization
```typescript
// ‚úÖ Manual chunks para otimiza√ß√£o
manualChunks: {
  'react-vendor': ['react', 'react-dom'],
  'mantine': ['@mantine/core', '@mantine/hooks'],
  'supabase': ['@supabase/supabase-js'],
  'i18n': ['i18next', 'react-i18next'],
  'utils': ['dayjs', 'jspdf']
}
```

## üìù Commits & Git

### Conventional Commits
```bash
# ‚úÖ Padr√£o correto
feat: add intelligent caching to repositories
fix: resolve validation error in work session creation
docs: update README with PWA features
refactor: extract business logic to separate service
test: add unit tests for WorkSessionBusinessService

# ‚ùå Commits gen√©ricos
update code
fix bug
add feature
```

### Git Hooks (Husky)
O projeto usa Husky para automatizar verifica√ß√µes de qualidade:

#### Pre-commit Hook
- **Lint-staged**: Executa ESLint e Prettier apenas nos arquivos staged
- **Testes**: Roda testes unit√°rios automaticamente
- **Formata√ß√£o**: Aplica formata√ß√£o autom√°tica com Prettier

#### Pre-push Hook
- **Type checking**: Verifica tipos TypeScript
- **Testes com coverage**: Executa testes com relat√≥rio de cobertura
- **Valida√ß√£o rigorosa**: Garante qualidade antes do push

#### Commit-msg Hook
- **Conventional Commits**: Valida formato das mensagens de commit
- **Padr√£o obrigat√≥rio**: For√ßa uso de conventional commits

```bash
# Hooks configurados
.husky/
‚îú‚îÄ‚îÄ pre-commit      # Lint + Testes
‚îú‚îÄ‚îÄ pre-push        # Type check + Coverage
‚îî‚îÄ‚îÄ commit-msg      # Valida√ß√£o de mensagem
```

### Branch Naming
```bash
# ‚úÖ Padr√£o correto
feature/intelligent-caching
fix/validation-errors
refactor/repository-pattern
docs/update-readme

# ‚ùå Nomes gen√©ricos
feature
fix
update
```

## üéØ Checklist de Qualidade

### Antes de Commitar
- [ ] C√≥digo segue padr√µes TypeScript
- [ ] Componentes s√£o reutiliz√°veis
- [ ] Business logic est√° em services
- [ ] Valida√ß√£o implementada
- [ ] Tratamento de erro adequado
- [ ] Cache implementado quando necess√°rio
- [ ] Testes escritos para nova funcionalidade
- [ ] Internacionaliza√ß√£o adicionada
- [ ] Performance n√£o degradada
- [ ] Acessibilidade mantida
- [ ] **Husky hooks executados automaticamente** ‚úÖ

### Antes de Fazer PR
- [ ] Todos os testes passando
- [ ] ESLint sem warnings
- [ ] TypeScript sem errors
- [ ] Documenta√ß√£o atualizada
- [ ] Performance testada
- [ ] Mobile responsivo
- [ ] PWA funcional
- [ ] Cache funcionando
- [ ] Valida√ß√£o robusta
- [ ] **Pre-push hook executado** ‚úÖ
- [ ] **Coverage de testes adequado** ‚úÖ

## üö® Anti-Patterns a Evitar

### ‚ùå Viola√ß√µes de SRP
```typescript
// ‚ùå Classe com m√∫ltiplas responsabilidades
class WorkSessionService {
  async startSession() {
    // Comunica√ß√£o com API
    // C√°lculo de tempo trabalhado
    // Valida√ß√£o de dados
    // Atualiza√ß√£o de estado
    // Logging
  }
}

// ‚úÖ Separa√ß√£o de responsabilidades
class WorkSessionService {
  async startSession() {
    const userId = await workSessionRepository.getCurrentUserId()
    const createData = WorkSessionBusinessService.formatCreateData(...)
    return await workSessionRepository.upsert(createData)
  }
}
```

### ‚ùå Comunica√ß√£o Direta com APIs
```typescript
// ‚ùå Acessar Supabase diretamente em componentes
export function Component() {
  const { data } = await supabase.from('work_sessions').select('*')
  return <div>{data}</div>
}

// ‚úÖ Usar repositories
export function Component() {
  const sessions = await workSessionRepository.findByUser(userId)
  return <div>{sessions}</div>
}
```

### ‚ùå L√≥gica de Neg√≥cio em Stores
```typescript
// ‚ùå Store com l√≥gica de neg√≥cio
const store = create((set) => ({
  startJourney: async () => {
    const workedHours = calculateWorkedHours(start, end)
    // L√≥gica de neg√≥cio no store
  }
}))

// ‚úÖ Store apenas com estado
const store = create((set) => ({
  startJourney: async () => {
    const session = await workSessionService.startSession()
    set({ session })
  }
}))
```

## üéâ Conclus√£o

Seguindo estas regras, voc√™ manter√° a qualidade e consist√™ncia do c√≥digo, garantindo que o projeto continue sendo um boilerplate de refer√™ncia para aplica√ß√µes React escal√°veis.

**Lembre-se**: Qualidade n√£o √© um ato, √© um h√°bito. Aplique estas regras consistentemente em todo o projeto! üöÄ 